// Code generated by protoc-gen-go-grpcproxy. DO NOT EDIT.

package helloworld

import (
	gin "github.com/gin-gonic/gin"
	grpcproxy "github.com/go-leo/grpcproxy"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

func GreeterProxyRoutes(cli GreeterClient) []grpcproxy.Route {
	return []grpcproxy.Route{
		grpcproxy.NewRoute(
			http.MethodGet,
			"/v1/SayHello",
			func(c *gin.Context) {
				req := new(HelloRequest)
				if err := grpcproxy.GetBind(c, req); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				ctx := grpcproxy.NewContext(c)
				var headerMD, trailerMD metadata.MD
				resp, err := cli.SayHello(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				grpcproxy.Render(c, headerMD, trailerMD, resp, err)
			},
		),
		// 这是个post接口
		grpcproxy.NewRoute(
			http.MethodPost,
			"/v2/p",
			func(c *gin.Context) {
				req := new(HelloRequest)
				if err := grpcproxy.Bind(c, req); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				ctx := grpcproxy.NewContext(c)
				var headerMD, trailerMD metadata.MD
				resp, err := cli.PostV2(ctx, req, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
				grpcproxy.Render(c, headerMD, trailerMD, resp, err)
			},
		),
	}
}
