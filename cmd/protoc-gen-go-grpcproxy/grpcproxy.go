/*
 *
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"bufio"
	"fmt"
	"github.com/go-leo/gox/stringx"
	"strings"

	//"regexp"
	"strconv"
	//"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	metadataPackage  = protogen.GoImportPath("google.golang.org/grpc/metadata")
	grpcPackage      = protogen.GoImportPath("google.golang.org/grpc")
	ginPackage       = protogen.GoImportPath("github.com/gin-gonic/gin")
	httpPackage      = protogen.GoImportPath("net/http")
	grpcproxyPackage = protogen.GoImportPath("github.com/go-leo/grpcproxy")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.proxy.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpcproxy. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genFunction(gen, file, g, service)
	}
}

func genFunction(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	funcName := service.GoName + "ProxyRoutes"
	clientName := service.GoName + "Client"

	g.P("func ", funcName, "(cli ", clientName, ") []", grpcproxyPackage.Ident("Route"), " {")
	g.P("return []grpcproxy.Route{")
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			routerInfo := genRouterInfo(g, service, method)
			if stringx.IsNotBlank(routerInfo.description) {
				g.P(routerInfo.description)
			}
			g.P(grpcproxyPackage.Ident("NewRoute"), "(")
			g.P(routerInfo.httpMethod, ",")
			g.P(routerInfo.httpPath, ",")
			g.P("func(c *", ginPackage.Ident("Context"), ") {")
			g.P("req := new(", method.Input.GoIdent, ")")
			g.P("if err := ", routerInfo.bindMethod, "(c, req); err != nil {")
			g.P("c.String(", httpPackage.Ident("StatusBadRequest"), ", err.Error())")
			g.P("_ = c.Error(err).SetType(", ginPackage.Ident("ErrorTypeBind"), ")")
			g.P("return")
			g.P("}")
			g.P("ctx := ", grpcproxyPackage.Ident("NewContext"), "(c)")
			g.P("var headerMD, trailerMD ", metadataPackage.Ident("MD"))
			g.P("resp, err := cli.", method.Desc.Name(), "(ctx, req, ", grpcPackage.Ident("Header"), "(&headerMD), ", grpcPackage.Ident("Trailer"), "(&trailerMD))")
			g.P(grpcproxyPackage.Ident("Render"), "(c, headerMD, trailerMD, resp, err)")
			g.P("},")
			g.P("),")
		} else {
			// Streaming RPC method
			continue
		}
	}
	g.P("}")
	g.P("}")

}

func genRouterInfo(g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method) *routerInfo {
	if *restful {
		return genRestfulRouterInfo(g, service, method)
	}
	return genNormalRouterInfo(service, method)
}

func genRestfulRouterInfo(g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method) *routerInfo {
	comments := strings.TrimSpace(method.Comments.Leading.String())
	scanner := bufio.NewScanner(strings.NewReader(comments))
	i := -1
	for scanner.Scan() {
		i++
		line := scanner.Text()
		line = strings.TrimSpace(strings.TrimPrefix(strings.TrimSpace(line), "//"))
		seg := strings.Split(line, " ")
		var newSeg []string
		for _, s := range seg {
			ss := strings.TrimSpace(s)
			if ss == "" {
				continue
			}
			newSeg = append(newSeg, ss)
		}
		seg = newSeg
		if len(seg) < 2 {
			continue
		}

		description := ""
		if len(seg) >= 3 {
			description = seg[2]
		}
		switch strings.ToLower(seg[0]) {
		case "get":
			return &routerInfo{
				httpMethod:  httpPackage.Ident("MethodGet"),
				httpPath:    strconv.Quote(seg[1]),
				bindMethod:  grpcproxyPackage.Ident("GetBind"),
				description: "// " + description,
			}
		case "post":
			return &routerInfo{
				httpMethod:  httpPackage.Ident("MethodPost"),
				httpPath:    strconv.Quote(seg[1]),
				bindMethod:  grpcproxyPackage.Ident("Bind"),
				description: "// " + description,
			}
		default:
			continue
		}
	}
	return genNormalRouterInfo(service, method)
}

func genNormalRouterInfo(service *protogen.Service, method *protogen.Method) *routerInfo {
	httpMethod := httpPackage.Ident("MethodPost")
	httpPath := strconv.Quote(formatFullMethodName(service, method))
	if *pathToLower {
		httpPath = strings.ToLower(httpPath)
	}
	return &routerInfo{
		httpMethod:  httpMethod,
		httpPath:    httpPath,
		bindMethod:  grpcproxyPackage.Ident("Bind"),
		description: strings.TrimSpace(method.Comments.Leading.String()),
	}
}

type routerInfo struct {
	httpMethod  protogen.GoIdent
	httpPath    string
	bindMethod  protogen.GoIdent
	description string
}

func formatFullMethodName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
}
