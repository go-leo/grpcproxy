/*
 *
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"strconv"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	metadataPackage  = protogen.GoImportPath("google.golang.org/grpc/metadata")
	grpcPackage      = protogen.GoImportPath("google.golang.org/grpc")
	ginPackage       = protogen.GoImportPath("github.com/gin-gonic/gin")
	httpPackage      = protogen.GoImportPath("net/http")
	grpcproxyPackage = protogen.GoImportPath("github.com/go-leo/grpcproxy")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.proxy.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpcproxy. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genFunction(gen, file, g, service)
	}
}

func genFunction(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	funcName := service.GoName + "ProxyRoutes"
	clientName := service.GoName + "Client"

	g.P("func ", funcName, "(cli ", clientName, ") []", grpcproxyPackage.Ident("Route"), " {")
	g.P("return []grpcproxy.Route{")
	for _, method := range service.Methods {
		if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
			// Unary RPC method
			g.P(grpcproxyPackage.Ident("NewRoute"), "(")
			g.P(httpPackage.Ident("MethodPost"), ",")
			g.P(strconv.Quote(formatFullMethodName(service, method)), ",")
			g.P("func(c *", ginPackage.Ident("Context"), ") {")
			g.P("req := new(", method.Input.GoIdent, ")")
			g.P("if err := ", grpcproxyPackage.Ident("Bind"), "(c, req); err != nil {")
			g.P("c.String(", httpPackage.Ident("StatusBadRequest"), ", err.Error())")
			g.P("_ = c.Error(err).SetType(", ginPackage.Ident("ErrorTypeBind"), ")")
			g.P("return")
			g.P("}")
			g.P("ctx := ", grpcproxyPackage.Ident("NewContext"), "(c)")
			g.P("var headerMD, trailerMD ", metadataPackage.Ident("MD"))
			g.P("resp, err := cli.SayHello(ctx, req, ", grpcPackage.Ident("Header"), "(&headerMD), ", grpcPackage.Ident("Trailer"), "(&trailerMD))")
			g.P(grpcproxyPackage.Ident("Render"), "(c, headerMD, trailerMD, resp, err)")
			g.P("},")
			g.P("),")
		} else {
			// Streaming RPC method
			continue
		}
	}
	g.P("}")
	g.P("}")

}

func formatFullMethodName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
}
